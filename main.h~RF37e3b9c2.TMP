#ifndef __main
#define __main

#include "stm32f0xx.h"
#include "math.h"
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <base64.h>
#include "cmsis_os.h"

#include "stdint.h"

#define MAIL_SIZE 								(u32) 50					// Размер очереди
#define DEBUG 									0							// Отладка
#if DEBUG
#define SCHEDULER_STATUS						1							// Статус планировщика. 0 - диспетчер задач, 1 - время работы задач
#endif
#define	RoutePoints_COUNT						10							// Количество точек для сохранения маршрута
#define	SaveZonePoints_COUNT					10							// Количество точек для сохранения зоны безопасности

#define waiting 								1000						// Таймаут ожидания для общения с GSM модулем
#define TIMEOUT_RTK								650							// Время таймаута ожидания новой посылки GPS
#define TIMEOUT_TIME                            10000                       // Время таймаута ожидания ответа GSM

#define CAN_EXT_ID_MASK							0x18000003
#define CAN_STD_ID								0x000						// Стандартный идентификатор
#define CAN_EXT_ID								0x00000000					// Расширенный идентификатор
#define CAN_LAT_ID								0x18060103					// Идентификатор широты для Контроллера ГСТ
#define CAN_LON_ID								0x18060203					// Идентификатор долготы для Контроллера ГСТ
#define CAN_ALT_ID								0x18051003					// Идентификатор высоты для Контроллера ГСТ

#define CAN_LAT1_EXT_ID							0x174						// Идентификатор широты от второго ГНСС модема
#define CAN_LON1_EXT_ID							0x175						// Идентификатор долготы от второго ГНСС модема
#define CAN_Remote_Control_A_ID					0x195						// Посылка от джойстика движения
#define CAN_Remote_Control_B_ID					0x196						// Посылка от джойстика навесного оборудования
#define CAN_Remote_Control_C_ID					0x198						// Посылка с оборотами ДВС
#define CAN_Remote_Control_sButton_ID			0x300

#define RPM_ENGINE								1600						// Обороты 750...2200

#define NTRIP_SERVER_ADDRESS                    "mo.youcors.com"            // Адрес NTRIP сервера
#define NTRIP_SERVER_PORT                       "2101"                      // Порт NTRIP сервера

#define NTRIP_CASTER                            "mo.youcors.com"            // Адрес кастера
#define NTRIP_SERVER_LOGIN                      "august24client"             // Логин точки доступа на NTRIP сервере
#define NTRIP_SERVER_PASSWORD                   "123456"                	// Пароль точки доступа на NTRIP сервере
#define NTRIP_SERVER_POINT                      "MPAugust24"                 // Имя точки доступа на NTRIP сервере

#define REMOTE_SERVER_ADDRESS					"192.162.100.33"			// Адрес сервера для мобильного приложения
#define REMOTE_SERVER_PORT                      "12488" 					// Порт сервера для мобильного приложения

#define PHONE_NUMBER1							"+79822979396"
#define PHONE_NUMBER2							"+79822814709"


#define RFM22_LENGTH_BUFFER						16                          // Длинна буфера радио модуля
#define USART2_RX_BUF_SIZE 						8                           // Длина буфера GPS данных

#define AT(x)									Write_GSM_Command((u8*)x)	// Сокращение функции для записи АТ команд

#define	GPS_USART_RX_PIN						GPIO_Pin_3					// Пин GPS USART RX
#define	GPS_USART_TX_PIN						GPIO_Pin_2					// Пин GPS USART TX
#define	GPS_PPS_PIN								GPIO_Pin_6					// Пин GPS PPS

#define GSM_GPIO								GPIOA
#define	GSM_USART_RX_PIN						GPIO_Pin_10
#define GSM_USART_TX_PIN						GPIO_Pin_9
#define GSM_PWR_KEY_PIN							GPIO_Pin_8
#define debug_pin								GPIO_Pin_1
#define SIM_CH_PIN								GPIO_Pin_0

#define	GSM_PWR_ON								GPIO_SetBits(GPIOB, GSM_PWR_KEY_PIN);
#define	GSM_PWR_OFF								GPIO_ResetBits(GPIOB, GSM_PWR_KEY_PIN);


#define GSM_BUF									100
#define PRINT_BUF								255
#define STATUS_BUF								255
#define GPS_BUF									255
#define	SERVER_BUF								500
#define NTRIP_BUF								1024
#define	CAN_BUF									8

#define DEG_TO_RAD 								0.01745329252
#define RAD_TO_DEG								57.29577951308

#define FULL_DRIVE								100
#define STOP_DRIVE								125
#define SLOW_DRIVE								50

#define	FULL_DRIVE_CRC							255 - FULL_DRIVE
#define STOP_DRIVE_CRC							255 - STOP_DRIVE
#define SLOW_DRIVE_CRC							255 - SLOW_DRIVE

#define NTRIP_SERVER_CON_ID						0
#define REMOTE_SERVER_CON_ID					1

#define PACK_ID_tNum							0x01
#define PACK_ID_Coords							0x02
#define PACK_ID_Mode							0x05
#define PACK_ID_RC								0x06
#define PACK_ID_ALIVE							0xA1
#define PACK_ID_Err								0xFF
#define PACK_ID_Confirm							0xFE

#define PACK_ID_myCoords						0x12
#define PACK_ID_dozerParams						0xA0
#define PACK_ID_CompletePoint					0x13

#define PACK_LEN_tNum							4
#define PACK_LEN_Coords							14
#define PACK_LEN_Mode							4
#define PACK_LEN_RC								12
#define PACK_LEN_Err							5
#define PACK_LEN_Confirm						6
#define PACK_LEN_myCoords						18
#define PACK_LEN_dozerParams					13
#define PACK_LEN_CompletePoint					4
#define PACK_LEN_ALIVE							5

#define PARCEL_ID_tNumSave						0x01
#define PARCEL_ID_tNumCoord						0x02
#define PARCEL_ID_SaveCoord						0x01
#define PARCEL_ID_PointCoord					0x02
#define PARCEL_ID_Mode							0x01
#define PARCEL_ID_RC							0x00
#define PARCEL_ID_Err							0xFF
#define PARCEL_ID_myCoord						0x01

#define CAN_Tx_Modem_201_ID						0x18020103
#define CAN_Tx_Modem_205_ID						0x18020503
#define CAN_Tx_Modem_207_ID						0x18020703
#define CAN_Tx_Modem_209_ID						0x18020903
#define CAN_Tx_Modem_210_ID						0x18021003
#define CAN_Tx_Modem_215_ID						0x18021503
#define CAN_Tx_Modem_216_ID						0x18021603
#define CAN_Tx_Modem_221_ID						0x18022103
#define CAN_Tx_Modem_2BD_ID						0x1802BD03

#define CAN_Tx_Modem_303_ID						0x18030303
#define CAN_Tx_Modem_308_ID						0x18030803
#define CAN_Tx_Modem_311_ID						0x18031103
#define CAN_Tx_Modem_313_ID						0x18031303
#define CAN_Tx_Modem_314_ID						0x18031403

#define CAN_EE_F004_ID							0xF004
#define CAN_EE_FEEE_ID							0xFEEE
#define CAN_EE_FEEF_ID							0xFEEF
#define CAN_EE_FEFC_ID							0xFEFC
#define CAN_EE_FFA0_ID							0xFFA0

#define CAN_Tx_DM1_Angles						0x18051103
#define CAN_Tx_DM1_Heights						0x18051203

enum List_of_Points_Type
{
	SAVE_ZONE = 1,				
	ROUTE									
};

enum List_of_MOVING
{
	NO_MOVEMENT,         					
	LEFT_DRIVE,          					
	RIGHT_DRIVE,         					
	FORWARD_DRIVE,       					
	BACKWARD_DRIVE      					
};

enum List_of_MODES_of_CONTROL
{
	IDLE_MODE,
	MANUAL_CONTROL_ON,
	MANUAL_CONTROL_OFF,
	START_AUTO,
	PAUSE_AUTO,
	RESUME_AUTO,
	STOP_AUTO,
	DISCONNECT_RC = 0xFF
};

enum List_of_CAN_places
{
	CAN_Tx_Modem_201_place,					
	CAN_Tx_Modem_205_place,					
	CAN_Tx_Modem_207_place,					
	CAN_Tx_Modem_209_place,					
	CAN_Tx_Modem_210_place,					
	CAN_Tx_Modem_215_place,				
	CAN_Tx_Modem_216_place,					
	CAN_Tx_Modem_221_place,					
	CAN_Tx_Modem_2BD_place,					
	CAN_Tx_Modem_303_place,					
	CAN_Tx_Modem_308_place,					
	CAN_Tx_Modem_311_place,					
	CAN_Tx_Modem_313_place,					
	CAN_Tx_Modem_314_place,					

	CAN_EE_F004_place,						
	CAN_EE_FEEE_place,						
	CAN_EE_FEEF_place,						
	CAN_EE_FEFC_place,						
	CAN_EE_FFA0_place,						

	CAN_Tx_DM1_Angles_place,				
	CAN_Tx_DM1_Heights_place				
};

typedef int64_t time_t;
typedef int64_t i64;
typedef uint8_t u8;
typedef int32_t i32;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;

struct GPGGA_Struct         					// Структура с данными GPS-ГЛОНАСС-модуля
{
	char _time [15];           					// Время
	char Latitude_int [10];     				// Широта целая часть
	char Latitude_float [12];   				// Широта десятичная часть
	char NS;                   					// Север-Юг
	char Longitude_int[10];     				// Долгота целая часть
	char Longitude_float[12];   				// Долгота десятичная часть
	char EW;                   					// Запад-Восток
	char ReceiverMode;         					// Режим работы приемника
	char SatelliteNum [10];     				// Количество спутников в решении
	char Altitude_int [12];     				// Высота целая часть
	char Altitude_float [10];   				// Высота десятичная часть
	char alt_full[20];
};
struct GPGGA_Struct GPSFixData; 				// С этой структурой и будем работать

typedef struct          						// Структура с сервисными данными
{
	u8 data [18];           					// Данные
} QUEUE_t;

typedef struct          						// Структура с сервисными данными
{
	u8 data [1];           						// Данные
} USART_q;


struct Coords									// Структура координат
{
	double latitude;
	double longitude;
};
struct Coords coordSaveZone[SaveZonePoints_COUNT];
struct Coords coordRoute[RoutePoints_COUNT];


// Функции
// ********************************************************************************************************************************************
void 											Error_Handler(void);
void 											blink(GPIO_TypeDef* GPIOx, u16 GPIO_Pin, u8 count, u32 duration_ms);
void 											Init_RCC(void);
void 											Init_USART_1(void);
void 											Init_USART_2(void);
void 											Init_CAN(void);
void 											Init_GPS(void);
void 											Init_GSM(void);
void 											StartDefaultTask(void const * argument);
void 											StartLedTask(void const * argument);
void 											StartGsmTask(void const * argument);
void 											StartGpsTask(void const * argument);
void 											StartmySysTickTask(void const * argument);
void 											StartmyMobileApplicationTask(void const * argument);
void 											StartmySendingServerDataTask(void const * argument);
void 											StartmyControlTask(void const * argument);
void 											StartUsartTask(void const * argument);
void 											CAN_Send(u8 *data, u32 can_id); 
void 											Parse_Nmea_Messages (void);
void 											run_gps_drive(void);
void 											gsm_at_parse (char *result, volatile char *GSM_TEMP, char *left_mask, char *right_mask);
void 											Get_Ip_adress(void);
void 											GPRS_Connection_ON(void);
void 											Send_SMS(char *phone_number, char *text);
void 											GSM_Off(void); 
void											GSM_On(void); 
void											GSM_Restart(void);
void											send_Uart(USART_TypeDef* USARTx, u8 c);
void 											send_Uart_AT(USART_TypeDef* USARTx, u8 *s);
void											delay(u32 mTime);
void 											clear_RXBuffer(u8 *RX_BUFER, u16 size);
void 											getting_data(void);
double 											Azimuth_Calculating (double latitude1, double longitude1, double latitude2, double longitude2);
u8 												Query_Signal_Quality(void);
ErrorStatus 									GSM_conf(void);
ErrorStatus 									Write_GSM_Command(u8 *command);
ErrorStatus 									Bring_Up_GPRS(void);
ErrorStatus 									Connect_To_Server(u8 CON_ID);
u16 											UCS2Char(char *ucs2, char *simbol);
u32 											millis(void) ;
i64 											char_to_int (char * c);
u8 												GET_DATA_PARCEL(u8 size, char *xBuf, u8 *result_mas1);

// ********************************************************************************************************************************************







// Карта переменных
// ********************************************************************************************************************************************
const char char_map[10] =																		// Карта
{
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
};


enum List_of_MODES_of_CONTROL				MODE_CONTROL;									// Режим управления
u8											total_NUM_Points_SaveZone = 0;						// Общее количество точек зоны безопасности
u8											total_NUM_Points_Route = 0;							// Общее количество точек маршрута
u8											incData_from_SERVER1 = 0;							// Флаг полученной посылки с первого сервера
u8											incData_from_SERVER2 = 0;							// Флаг полученной посылки с NTRIP сервера
u8											SEND_OK_waiting = 0;								// Флаг ожидания успешной отправки

u16											s1_buf_cnt = 0;										// Счетчик буфера сервера
u16											s2_buf_cnt = 0;										// Счетчик буфера NTRIP сервера
i64 										GPS_al  = 251156;									// Высота с GPS модуля после парсинга NMEA
double 										GPS_lat;											// Широта с GPS модуля после парсинга NMEA
double 										GPS_lon;											// Долгота с GPS модуля после парсинга NMEA


u16											size_of_RTK_parcel = 0;								// Размер принятой NTRIP посылки
u16											size_of_RTK_parcel_cnt = 0;							// Счетчик Массива

u8 											n_lat_float = 0; 									// Количество цифр после запятой в широте с GPS приемника(парсинг NMEA)
u8											n_lon_float = 0; 									// Количество цифр после запятой в долготе с GPS приемника(парсинг NMEA)
u8											n_alt_float = 0;									// Количество цифр после запятой в высоте с GPS приемника(парсинг NMEA)

u8 											turn_in_place = 0;									// Флаг поворота на месте

volatile time_t 							total_cnt;											// Счетчик миллисекунд

volatile time_t								timeout_USART_wait = 0;								// Таймер для ожидания USART1 байт
volatile time_t 							packet_timer = 0;									// Таймер для посылок с NTRIP сервера
volatile time_t 							packet_timer2 = 0;									// Таймер для посылок с сервера

volatile time_t 							RECEIVE0_timer = 0;									// Таймер для посылок с NTRIP сервера
volatile  time_t 							RECEIVE1_timer = 0;									// Таймер для посылок с сервера

volatile time_t 							get_server1_timer = 0;								// Таймер для обработанных посылок с NTRIP сервера
volatile time_t 							get_server2_timer = 0;								// Таймер для обработанных посылок с сервера

volatile time_t								RC_timer = 0;



u32 									   	k = 0;                        						// Переменные для счетчиков
u32											gsm = 0, gsm_old = 0;                                               
																				
u8                                         	GPS_Usart_Symbol = 0;           					// Переменная для хранения текущего символа USART2
USART_q                                     GSM_Usart_Symbol;           						// Переменная для хранения текущего символа USART1
                                                

u8											SIM1_rssi = 99;										// 0 -115 dBm или меньше
																								// 1 -111 dBm
																								// 2...30 -110... -54 dBm
																								// 31 -52 dBm или больше
																								// 99 не известна или не определена
u16											mnc_operator = 0;									// MNC код оператора
u8 											percent_signal = 0;									// Уровень сигнала в процентах

u8 											isConnectionOpened = 0;								// Флаг открытого соединения NTRIP сервера
u8 											isConnectionOpened2 = 0;							// Флаг открытого соединения сервера
u8											isGprsActive = 0;									// Флаг активного GPRS
u8											NTRIP_CONNECT_OK = 0;								// Флаг успешного подключения к NTRIP серверу
u8											REMOTE_CONNECT_OK = 0; 								// Флаг успешного подключения к серверу

u64 										u64_lat1 = 0;										// uint64 переменная для широты от второго ГНСС модема					
double	 									lat1_multiplier = 0;								// множитель широты

u64 										u64_lon1 = 0;										// uint64 переменная для долготы от второго ГНСС модема
double	 									lon1_multiplier = 0;								// множитель долготы

u8											isGpsDriveAllowed = 1;								// Разрешение на автономное движение
u8											isRcDriveAllowed = 0;								// Разрешение на дистанционное движение

double 										coord_GPS1_latitude = 0;							// Итоговая широта первого ГНСС модема
double 										coord_GPS2_latitude = 0;							// Итоговая широта второго ГНСС модема
double 										coord_TARGET_latitude = 0;							// Итоговая широта цели					
double 										coord_GPS1_longitude = 0;							// Итоговая долгота первого ГНСС модема	
double 										coord_GPS2_longitude = 0;							// Итоговая долгота второго ГНСС модема	
double 										coord_TARGET_longitude = 0;							// Итоговая долгота цели	


float 										HEADING = 0;										// Азимут
float 										ANGLE_btw_TARGET_N_DOZER = 0;						// Угол между машиной и целью
float 										DELTA_ANGLE_btw_CURSE_N_HEADING = 0;				// Разниаца между Азимутом и углом к цели
float										SPEED_ENGINE = 0;

double 										fi;
double 										pi = 3.14159265359;

double 										shirota_lau_rad;       // Пересчет координат цели в радианы
double 										dolgota_lau_rad;
double 										shirota_tar_rad;
double 										dolgota_tar_rad;

u16 debug_cnt;
u16 debug_cnt2;
u8 next;
volatile unsigned long ulHighFrequencyTimerTicks;
u32 TIM3_cnt = 0;

u8 speed_level = 0;

u8 left_btn = 0, right_btn = 0;
u8 init = 0;
u8											good_end_of_AT = 0;
u8											bad_end_of_AT = 0;
u8 											SEND_OK = 0;
u8 											SEND_FAIL = 0;
u8 											RING = 0;
u32											FAIL_cnt = 0;
u8											ready_to_send = 0;
u8											SUCCESS_NTRIP = 0;
u8											search_SUCCESS_NTRIP = 0;
u8											search_RING = 0;
u8											search_ARROW = 0;
u8											search_OK = 0;
u8											search_SEND_OK = 0;
u8											search_SEND_FAIL = 0;
u8											search_CONNECT = 0;
u8											search_ERROR = 0;
u8											search_CLOSED = 0;
u8											server_CLOSED = 0;
u8 											search = 0;
u8 											search2 = 0;
u16 										packet_parcel_count = 0;
u8 											packet_parcel_countX = 0;
u8											search_DOLLAR = 0;
u8											search_RECEIVE0 = 0;
u8											search_RECEIVE1 = 0;
u8											continue_debug = 0;
u8 											parcel_count;
u8 											pack_length = 0;
u16 										rtk_length = 0;
u8											received_pack_bytes = 0;
u16											received_rtk_bytes = 0;
u16											f5_debug = 0;
u16											c5_debug = 0;
volatile time_t 							delta_timeout_USART = 0;
volatile time_t								delta_timeout_RTK = 0;
volatile time_t								delta_timeout_SERVER = 0;
volatile time_t								delta_timeout_RC = 0;
u8											NTRIP_Server_comma_found = 0;
u8 											isGprsDeactNeed = 0;
u8											Current_Route_Point = 0;
u8											Num_Route_Point_DONE = 0;
u8											RC_SEND = 0;
u8											RC_BTN_SEND = 0;
volatile time_t 									    tick_counter;											// Счетчик миллисекунд
u8 											start_bit;
u8											overflow = 0;


u8 sendingMSG[6];
size_t freemem = 0;
#if DEBUG
	char buffer_vTask[500];
	u32 vTask_timer = 0;

#endif

// ********************************************************************************************************************************************

volatile time_t calculated_time = 0;
volatile time_t delta_calc = 0;
volatile time_t number1;
u8 negative_flag;
u8 ies;
u8 char_cnt;
u8 sizeofc = 0;
char mnc_operator_array[6] = {0, 0, 0, 0, 0, 0};
u8 NE_DATA_FLAG = 0;
u8 sendbuffer[11] = {'H', 'E', 'L', 'L', 'O', ' ', 'W', 'O', 'R', 'L', 'D'};


char 			print_buffer					[PRINT_BUF] __attribute__((at(0x20000603)));        // Буфер для sprintf

volatile u8 	GPS_DATA						[GPS_BUF]	__attribute__((at(0x20000766)));  		// Буффер на GPS данные
volatile char	GSM_DATA						[GSM_BUF] 	__attribute__((at(0x20000865))); 		// USART1 буфер
u8				CAN_BASKET_LAT					[CAN_BUF] 	__attribute__((at(0x200008C9)));		// Корзина для широты в CAN
u8				CAN_BASKET_LON					[CAN_BUF]	__attribute__((at(0x200008D1)));		// Корзина для долготы в CAN
u8				CAN_BASKET_ALT					[CAN_BUF]	__attribute__((at(0x200008D9)));		// Корзина для высоты в CAN
u8				CAN_BASKET_RC_DRIVING			[CAN_BUF]	__attribute__((at(0x200008E1)));		// Корзина для дистанционки в CAN				
u8				CAN_BASKET_RC_DIR				[CAN_BUF]	__attribute__((at(0x200008E9)));		// Корзина для дистанционки в CAN		
u8				CAN_BASKET_RC_SPEED_ENGINE		[CAN_BUF]	__attribute__((at(0x200008F1)));		// Корзина для дистанционки в CAN
u8				CAN_BASKET_RC_START_BUTTON		[CAN_BUF]	__attribute__((at(0x200008F9)));		// Корзина для дистанционки в CAN

char			size_of_RTK_parcel_arr			[4]			__attribute__((at(0x20000901)));		// Массив для хранения размера принятой NTRIP посылки

char			RECEIVE_SERVER_BUF				[SERVER_BUF]__attribute__((at(0x20000905)));		// Буфер для посылок с сервера

u8 				parsed_buffer					[255] 		__attribute__((at(0x20000E04)));
u8 				zzzbuffer						[20] 		__attribute__((at(0x20000F03)));
u8 				Calling_number					[12] 		__attribute__((at(0x20000F17)));

// Cтруктуры
// ********************************************************************************************************************************************
CanRxMsg 										RxMessage;
GPIO_InitTypeDef 					            GPIO_InitStructure;             // Инициализация структур
DMA_InitTypeDef 					            DMA_InitStructure;
NVIC_InitTypeDef 					            NVIC_InitStructure;
USART_InitTypeDef 				                USART_InitStructure;
TIM_TimeBaseInitTypeDef							TIM_InitStructure;
// ********************************************************************************************************************************************

// Задачи
// ********************************************************************************************************************************************
osThreadId defaultTaskHandle;
osThreadId myLedTaskHandle;
osThreadId myGsmTaskHandle;
osThreadId myGpsTaskHandle;
osThreadId mySysTickTaskHandle;
osThreadId myMobileApplicationHandle;
osThreadId mySendingServerDataHandle;
osThreadId myControlHandle;
osThreadId myUsartHandle;

osMessageQId SendQueueHandle;
osMessageQId UsartQueueHandle;

// ********************************************************************************************************************************************


#endif //__main
